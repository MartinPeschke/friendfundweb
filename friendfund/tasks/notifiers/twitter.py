import simplejson, urllib, urllib2, loggingfrom friendfund.lib import oauthfrom friendfund.lib import tw_helperfrom friendfund.tasks.notifiers.common import MissingTemplateException, InvalidAccessTokenExceptionfrom friendfund.tasks.notifiers.twitter_templates import TEMPLATES, STANDARD_PARAMSlog = logging.getLogger(__name__)def send_tweet(sndr_data, rcpt_data, template_data):	msg_realm = template_data.get('is_secret') == '0' and "public" or "secret"	templ_name = template_data['t_name']	try:		template = TEMPLATES[templ_name][msg_realm]	except KeyError, e:		log.warning( "ERROR Twitter TWEET Template not Found for (%s)" , templ_name )		raise MissingTemplateException(e)		msg_params = dict(template_data)	msg_params['screen_name'] = rcpt_data['screen_name']	msg =  template.substitute(**msg_params)	consumer = oauth.Consumer(sndr_data['twitterapikey'], sndr_data['twitterapisecret'])	try:		json_data = tw_helper.fetch_url("https://api.twitter.com/1/statuses/update.json", 										"POST", 										sndr_data['access_token'], 										sndr_data['access_token_secret'], 										consumer,										params = {"status" : msg})	except urllib2.HTTPError, e:		print e.fp.read()		raise InvalidAccessTokenException(e)	else:		json_data = simplejson.loads(json_data)		return str(json_data.get("id"))def send_dm(sndr_data, rcpt_data, template_data):	msg_realm = template_data.get('is_secret') == '0' and "public" or "secret"	templ_name = template_data['t_name']	try:		template = TEMPLATES[templ_name][msg_realm]	except KeyError, e:		log.warning( "ERROR Twitter DM Template not Found for (%s)" , templ_name )		raise MissingTemplateException(e)		msg =  template.substitute(**dict(template_data))	consumer = oauth.Consumer(sndr_data['twitterapikey'], sndr_data['twitterapisecret'])	try:		json_data = tw_helper.fetch_url("https://api.twitter.com/1/direct_messages/new.json", 										"POST", 										sndr_data['access_token'], 										sndr_data['access_token_secret'], 										consumer,										params = {"user_id":rcpt_data["network_ref"], "text":msg})	except urllib2.HTTPError, e:		print e.fp.read()		raise InvalidAccessTokenException(e)	else:		json_data = simplejson.loads(json_data)		return str(json_data.get("id"))