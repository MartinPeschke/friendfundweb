################################################## 
# Payment_services.py 
# generated by ZSI.generate.wsdl2python
##################################################


from Payment_services_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class PaymentLocator:
    PaymentPortType_address = "https://pal-test.adyen.com/pal/servlet/soap/Payment"
    def getPaymentPortTypeAddress(self):
        return PaymentLocator.PaymentPortType_address
    def getPaymentPortType(self, url=None, **kw):
        return PaymentHttpBindingSOAP(url or PaymentLocator.PaymentPortType_address, **kw)

# Methods
class PaymentHttpBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: authorise
    def authorise(self, request):
        if isinstance(request, authoriseRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(authoriseResponse.typecode)
        return response

    # op: authorise3d
    def authorise3d(self, request):
        if isinstance(request, authorise3dRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(authorise3dResponse.typecode)
        return response

    # op: authoriseReferral
    def authoriseReferral(self, request):
        if isinstance(request, authoriseReferralRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(authoriseReferralResponse.typecode)
        return response

    # op: balanceCheck
    def balanceCheck(self, request):
        if isinstance(request, balanceCheckRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(balanceCheckResponse.typecode)
        return response

    # op: cancel
    def cancel(self, request):
        if isinstance(request, cancelRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(cancelResponse.typecode)
        return response

    # op: cancelOrRefund
    def cancelOrRefund(self, request):
        if isinstance(request, cancelOrRefundRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(cancelOrRefundResponse.typecode)
        return response

    # op: capture
    def capture(self, request):
        if isinstance(request, captureRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(captureResponse.typecode)
        return response

    # op: checkFraud
    def checkFraud(self, request):
        if isinstance(request, checkFraudRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(checkFraudResponse.typecode)
        return response

    # op: directdebit
    def directdebit(self, request):
        if isinstance(request, directdebitRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(directdebitResponse.typecode)
        return response

    # op: fundTransfer
    def fundTransfer(self, request):
        if isinstance(request, fundTransferRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(fundTransferResponse.typecode)
        return response

    # op: refund
    def refund(self, request):
        if isinstance(request, refundRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(refundResponse.typecode)
        return response

    # op: refundWithData
    def refundWithData(self, request):
        if isinstance(request, refundWithDataRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(refundWithDataResponse.typecode)
        return response

authoriseRequest = ns0.authorise_Dec().pyclass

authoriseResponse = ns0.authoriseResponse_Dec().pyclass

authorise3dRequest = ns0.authorise3d_Dec().pyclass

authorise3dResponse = ns0.authorise3dResponse_Dec().pyclass

authoriseReferralRequest = ns0.authoriseReferral_Dec().pyclass

authoriseReferralResponse = ns0.authoriseReferralResponse_Dec().pyclass

balanceCheckRequest = ns0.balanceCheck_Dec().pyclass

balanceCheckResponse = ns0.balanceCheckResponse_Dec().pyclass

cancelRequest = ns0.cancel_Dec().pyclass

cancelResponse = ns0.cancelResponse_Dec().pyclass

cancelOrRefundRequest = ns0.cancelOrRefund_Dec().pyclass

cancelOrRefundResponse = ns0.cancelOrRefundResponse_Dec().pyclass

captureRequest = ns0.capture_Dec().pyclass

captureResponse = ns0.captureResponse_Dec().pyclass

checkFraudRequest = ns0.checkFraud_Dec().pyclass

checkFraudResponse = ns0.checkFraudResponse_Dec().pyclass

directdebitRequest = ns0.directdebit_Dec().pyclass

directdebitResponse = ns0.directdebitResponse_Dec().pyclass

fundTransferRequest = ns0.fundTransfer_Dec().pyclass

fundTransferResponse = ns0.fundTransferResponse_Dec().pyclass

refundRequest = ns0.refund_Dec().pyclass

refundResponse = ns0.refundResponse_Dec().pyclass

refundWithDataRequest = ns0.refundWithData_Dec().pyclass

refundWithDataResponse = ns0.refundWithDataResponse_Dec().pyclass
