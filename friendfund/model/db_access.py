import loggingfrom lxml import etreefrom pylons import tmpl_context as cfrom friendfund.model.badge import Badgeclass SProcException(Exception):	passclass SProcWarningMessage(Exception):	passdef _execute(dbcursor, log, query, *args):	"""	<RESULT badge="ACTIVIST" status="0" proc_name="add_pool_invitees"/>	"""	if filter(None, args):		if len(''.join(args)) < 1000:			log.info( 'QUERY: %s with %s' , query, args and unicode(args))		else:			log.info( 'QUERY: %s with %s' , query, args and '\n'.join([unicode(a[:1000]) for a in args]))	else:		log.info( 'QUERY: %s' , query )	log.debug('CONNECTION IN HAND')	if filter(None, args):		dbcursor.execute(query, *args)	else:		dbcursor.execute(query)		log.debug('EXECUTED QUERY')	r = dbcursor.fetchone()[0]	if not isinstance(r, basestring):		return None, dbcursor	else:		log.info( 'RESULT %s', r )		result = etree.fromstring(r)		result_state = int(result.get('status', 1))				#verify sproc exited without error		if result.tag != 'RESULT' or result_state != 0:			log.error("SProc Error Occured: %s:%s (%s)" % 						(result.get('proc_name'), result.get('status', 0), result.get('error_message')))			raise SProcException("SProc Error Occured: %s:%s (%s)" % 						(result.get('proc_name'), result.get('status', 0), result.get('error_message')))				#check for db messages or warnings		elif result_state == 0 and result.get('db_message', None):			log.warning("SProc Warning Occured: %s: (%s)" % 						(query, result.get('db_message')))			raise SProcWarningMessage(result.get('db_message', None))		#check for badges returned by DB		elif 'badge' in result.attrib:			c.messages.append(Badge(name = result.get('badge')))		return result, dbcursordef execute_query(DBPool, log, *args, **kwargs):	try:		log.debug('ACQUIRING CONNECTION')		conn = DBPool.connection()		cur = conn.cursor()		return _execute(cur, log, *args, **kwargs)	finally:		log.debug('CONNECTION CLOSING....')		cur.close()		conn.close()		log.debug('CONNECTION CLOSED & RETURNED')