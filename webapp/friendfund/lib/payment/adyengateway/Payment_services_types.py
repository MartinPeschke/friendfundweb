################################################## 
# Payment_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://common.services.adyen.com
##############################

class ns1:
    targetNamespace = "http://common.services.adyen.com"

    class Address_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://common.services.adyen.com"
        type = (schema, "Address")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Address_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"city"), aname="_city", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"country"), aname="_country", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"houseNumberOrName"), aname="_houseNumberOrName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"postalCode"), aname="_postalCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"stateOrProvince"), aname="_stateOrProvince", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"street"), aname="_street", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._city = None
                    self._country = None
                    self._houseNumberOrName = None
                    self._postalCode = None
                    self._stateOrProvince = None
                    self._street = None
                    return
            Holder.__name__ = "Address_Holder"
            self.pyclass = Holder

    class Amount_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://common.services.adyen.com"
        type = (schema, "Amount")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Amount_Def.schema
            TClist = [self.__class__.currency_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._currency = None
                    self._value = None
                    return
            Holder.__name__ = "Amount_Holder"
            self.pyclass = Holder


        class currency_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "currency"
            schema = "http://common.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://common.services.adyen.com","currency")
                kw["aname"] = "_currency"
                ZSI.TC.String.__init__(self, **kw)




    class BrowserInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://common.services.adyen.com"
        type = (schema, "BrowserInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.BrowserInfo_Def.schema
            TClist = [self.__class__.acceptHeader_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.userAgent_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._acceptHeader = None
                    self._userAgent = None
                    return
            Holder.__name__ = "BrowserInfo_Holder"
            self.pyclass = Holder


        class acceptHeader_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "acceptHeader"
            schema = "http://common.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://common.services.adyen.com","acceptHeader")
                kw["aname"] = "_acceptHeader"
                ZSI.TC.String.__init__(self, **kw)





        class userAgent_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "userAgent"
            schema = "http://common.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://common.services.adyen.com","userAgent")
                kw["aname"] = "_userAgent"
                ZSI.TC.String.__init__(self, **kw)




    class ServiceException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://common.services.adyen.com"
        type = (schema, "ServiceException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ServiceException_Def.schema
            TClist = [GTD("http://common.services.adyen.com","Error",lazy=False)(pname=(ns,"error"), aname="_error", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","Type",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._error = None
                    self._type = None
                    return
            Holder.__name__ = "ServiceException_Holder"
            self.pyclass = Holder

    class Error_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://common.services.adyen.com"
        type = (schema, "Error")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Type_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://common.services.adyen.com"
        type = (schema, "Type")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

# end class ns1 (tns: http://common.services.adyen.com)

##############################
# targetNamespace
# http://payment.services.adyen.com
##############################

class ns0:
    targetNamespace = "http://payment.services.adyen.com"

    class BalanceCheckRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "BalanceCheckRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BalanceCheckRequest_Def.schema
            TClist = [GTD("http://common.services.adyen.com","Amount",lazy=False)(pname=(ns,"additionalAmount"), aname="_additionalAmount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","anyType2anyTypeMap",lazy=False)(pname=(ns,"additionalData"), aname="_additionalData", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","Amount",lazy=False)(pname=(ns,"amount"), aname="_amount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","BankAccount",lazy=False)(pname=(ns,"bankAccount"), aname="_bankAccount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","BrowserInfo",lazy=False)(pname=(ns,"browserInfo"), aname="_browserInfo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","Card",lazy=False)(pname=(ns,"card"), aname="_card", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","ForexQuote",lazy=False)(pname=(ns,"dccQuote"), aname="_dccQuote", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","Address",lazy=False)(pname=(ns,"deliveryAddress"), aname="_deliveryAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","ELV",lazy=False)(pname=(ns,"elv"), aname="_elv", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"fraudOffset"), aname="_fraudOffset", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"merchantAccount"), aname="_merchantAccount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","ThreeDSecureData",lazy=False)(pname=(ns,"mpiData"), aname="_mpiData", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"orderReference"), aname="_orderReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","Recurring",lazy=False)(pname=(ns,"recurring"), aname="_recurring", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"reference"), aname="_reference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"selectedBrand"), aname="_selectedBrand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"selectedRecurringDetailReference"), aname="_selectedRecurringDetailReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sessionId"), aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperEmail"), aname="_shopperEmail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperIP"), aname="_shopperIP", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperInteraction"), aname="_shopperInteraction", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperReference"), aname="_shopperReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperStatement"), aname="_shopperStatement", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._additionalAmount = None
                    self._additionalData = None
                    self._amount = None
                    self._bankAccount = None
                    self._browserInfo = None
                    self._card = None
                    self._dccQuote = None
                    self._deliveryAddress = None
                    self._elv = None
                    self._fraudOffset = None
                    self._merchantAccount = None
                    self._mpiData = None
                    self._orderReference = None
                    self._recurring = None
                    self._reference = None
                    self._selectedBrand = None
                    self._selectedRecurringDetailReference = None
                    self._sessionId = None
                    self._shopperEmail = None
                    self._shopperIP = None
                    self._shopperInteraction = None
                    self._shopperReference = None
                    self._shopperStatement = None
                    return
            Holder.__name__ = "BalanceCheckRequest_Holder"
            self.pyclass = Holder

    class BalanceCheckResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "BalanceCheckResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BalanceCheckResult_Def.schema
            TClist = [GTD("http://common.services.adyen.com","Amount",lazy=False)(pname=(ns,"currentBalance"), aname="_currentBalance", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pspReference"), aname="_pspReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","BalanceCheckResponseCode",lazy=False)(pname=(ns,"responseCode"), aname="_responseCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._currentBalance = None
                    self._pspReference = None
                    self._responseCode = None
                    return
            Holder.__name__ = "BalanceCheckResult_Holder"
            self.pyclass = Holder

    class BalanceCheckResponseCode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "BalanceCheckResponseCode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BankAccount_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "BankAccount")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BankAccount_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"bankAccountNumber"), aname="_bankAccountNumber", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bankLocationId"), aname="_bankLocationId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bankName"), aname="_bankName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bic"), aname="_bic", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"iban"), aname="_iban", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ownerName"), aname="_ownerName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bankAccountNumber = None
                    self._bankLocationId = None
                    self._bankName = None
                    self._bic = None
                    self._countryCode = None
                    self._iban = None
                    self._ownerName = None
                    return
            Holder.__name__ = "BankAccount_Holder"
            self.pyclass = Holder

    class Card_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "Card")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Card_Def.schema
            TClist = [GTD("http://common.services.adyen.com","Address",lazy=False)(pname=(ns,"billingAddress"), aname="_billingAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"brand"), aname="_brand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), self.__class__.cvc_Dec(minOccurs=0, maxOccurs=1, nillable=True, encoded=kw.get("encoded")), self.__class__.expiryMonth_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.expiryYear_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.holderName_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.issueNumber_Dec(minOccurs=0, maxOccurs=1, nillable=True, encoded=kw.get("encoded")), self.__class__.number_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.startMonth_Dec(minOccurs=0, maxOccurs=1, nillable=True, encoded=kw.get("encoded")), self.__class__.startYear_Dec(minOccurs=0, maxOccurs=1, nillable=True, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._billingAddress = None
                    self._brand = None
                    self._cvc = None
                    self._expiryMonth = None
                    self._expiryYear = None
                    self._holderName = None
                    self._issueNumber = None
                    self._number = None
                    self._startMonth = None
                    self._startYear = None
                    return
            Holder.__name__ = "Card_Holder"
            self.pyclass = Holder


        class cvc_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "cvc"
            schema = "http://payment.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://payment.services.adyen.com","cvc")
                kw["aname"] = "_cvc"
                ZSI.TC.String.__init__(self, **kw)





        class expiryMonth_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "expiryMonth"
            schema = "http://payment.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://payment.services.adyen.com","expiryMonth")
                kw["aname"] = "_expiryMonth"
                ZSI.TC.String.__init__(self, **kw)





        class expiryYear_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "expiryYear"
            schema = "http://payment.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://payment.services.adyen.com","expiryYear")
                kw["aname"] = "_expiryYear"
                ZSI.TC.String.__init__(self, **kw)





        class holderName_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "holderName"
            schema = "http://payment.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://payment.services.adyen.com","holderName")
                kw["aname"] = "_holderName"
                ZSI.TC.String.__init__(self, **kw)





        class issueNumber_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "issueNumber"
            schema = "http://payment.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://payment.services.adyen.com","issueNumber")
                kw["aname"] = "_issueNumber"
                ZSI.TC.String.__init__(self, **kw)





        class number_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "number"
            schema = "http://payment.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://payment.services.adyen.com","number")
                kw["aname"] = "_number"
                ZSI.TC.String.__init__(self, **kw)





        class startMonth_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "startMonth"
            schema = "http://payment.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://payment.services.adyen.com","startMonth")
                kw["aname"] = "_startMonth"
                ZSI.TC.String.__init__(self, **kw)





        class startYear_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "startYear"
            schema = "http://payment.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://payment.services.adyen.com","startYear")
                kw["aname"] = "_startYear"
                ZSI.TC.String.__init__(self, **kw)




    class DirectDebitRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "DirectDebitRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DirectDebitRequest_Def.schema
            TClist = [GTD("http://common.services.adyen.com","Amount",lazy=False)(pname=(ns,"additionalAmount"), aname="_additionalAmount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","anyType2anyTypeMap",lazy=False)(pname=(ns,"additionalData"), aname="_additionalData", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","Amount",lazy=False)(pname=(ns,"amount"), aname="_amount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","BankAccount",lazy=False)(pname=(ns,"bankAccount"), aname="_bankAccount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","BrowserInfo",lazy=False)(pname=(ns,"browserInfo"), aname="_browserInfo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","ForexQuote",lazy=False)(pname=(ns,"dccQuote"), aname="_dccQuote", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","Address",lazy=False)(pname=(ns,"deliveryAddress"), aname="_deliveryAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"fraudOffset"), aname="_fraudOffset", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"merchantAccount"), aname="_merchantAccount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"orderReference"), aname="_orderReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","Recurring",lazy=False)(pname=(ns,"recurring"), aname="_recurring", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"reference"), aname="_reference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"selectedBrand"), aname="_selectedBrand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"selectedRecurringDetailReference"), aname="_selectedRecurringDetailReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sessionId"), aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperEmail"), aname="_shopperEmail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperIP"), aname="_shopperIP", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperInteraction"), aname="_shopperInteraction", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperReference"), aname="_shopperReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperStatement"), aname="_shopperStatement", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._additionalAmount = None
                    self._additionalData = None
                    self._amount = None
                    self._bankAccount = None
                    self._browserInfo = None
                    self._dccQuote = None
                    self._deliveryAddress = None
                    self._fraudOffset = None
                    self._merchantAccount = None
                    self._orderReference = None
                    self._recurring = None
                    self._reference = None
                    self._selectedBrand = None
                    self._selectedRecurringDetailReference = None
                    self._sessionId = None
                    self._shopperEmail = None
                    self._shopperIP = None
                    self._shopperInteraction = None
                    self._shopperReference = None
                    self._shopperStatement = None
                    return
            Holder.__name__ = "DirectDebitRequest_Holder"
            self.pyclass = Holder

    class DirectDebitResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "DirectDebitResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DirectDebitResponse_Def.schema
            TClist = [GTD("http://payment.services.adyen.com","anyType2anyTypeMap",lazy=False)(pname=(ns,"additionalData"), aname="_additionalData", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","FraudResult",lazy=False)(pname=(ns,"fraudResult"), aname="_fraudResult", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pspReference"), aname="_pspReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"refusalReason"), aname="_refusalReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"resultCode"), aname="_resultCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._additionalData = None
                    self._fraudResult = None
                    self._pspReference = None
                    self._refusalReason = None
                    self._resultCode = None
                    return
            Holder.__name__ = "DirectDebitResponse_Holder"
            self.pyclass = Holder

    class ELV_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "ELV")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ELV_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"accountHolderName"), aname="_accountHolderName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bankAccountNumber"), aname="_bankAccountNumber", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bankLocation"), aname="_bankLocation", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bankLocationId"), aname="_bankLocationId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bankName"), aname="_bankName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accountHolderName = None
                    self._bankAccountNumber = None
                    self._bankLocation = None
                    self._bankLocationId = None
                    self._bankName = None
                    return
            Holder.__name__ = "ELV_Holder"
            self.pyclass = Holder

    class ForexQuote_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "ForexQuote")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ForexQuote_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"account"), aname="_account", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"accountType"), aname="_accountType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","Amount",lazy=False)(pname=(ns,"baseAmount"), aname="_baseAmount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"basePoints"), aname="_basePoints", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","Amount",lazy=False)(pname=(ns,"buy"), aname="_buy", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","Amount",lazy=False)(pname=(ns,"interbank"), aname="_interbank", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"reference"), aname="_reference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","Amount",lazy=False)(pname=(ns,"sell"), aname="_sell", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"signature"), aname="_signature", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"source"), aname="_source", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"type"), aname="_type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"validTill"), aname="_validTill", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._account = None
                    self._accountType = None
                    self._baseAmount = None
                    self._basePoints = None
                    self._buy = None
                    self._interbank = None
                    self._reference = None
                    self._sell = None
                    self._signature = None
                    self._source = None
                    self._type = None
                    self._validTill = None
                    return
            Holder.__name__ = "ForexQuote_Holder"
            self.pyclass = Holder

    class FraudCheckResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "FraudCheckResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FraudCheckResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"accountScore"), aname="_accountScore", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"checkId"), aname="_checkId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accountScore = None
                    self._checkId = None
                    self._name = None
                    return
            Holder.__name__ = "FraudCheckResult_Holder"
            self.pyclass = Holder

    class FraudResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "FraudResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FraudResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"accountScore"), aname="_accountScore", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","ArrayOfFraudCheckResult",lazy=False)(pname=(ns,"results"), aname="_results", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accountScore = None
                    self._results = None
                    return
            Holder.__name__ = "FraudResult_Holder"
            self.pyclass = Holder

    class FundTransferRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "FundTransferRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FundTransferRequest_Def.schema
            TClist = [GTD("http://payment.services.adyen.com","anyType2anyTypeMap",lazy=False)(pname=(ns,"additionalData"), aname="_additionalData", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authorisationCode"), aname="_authorisationCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"merchantAccount"), aname="_merchantAccount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","Amount",lazy=False)(pname=(ns,"modificationAmount"), aname="_modificationAmount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"originalReference"), aname="_originalReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"reference"), aname="_reference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperEmail"), aname="_shopperEmail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperStatement"), aname="_shopperStatement", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._additionalData = None
                    self._authorisationCode = None
                    self._merchantAccount = None
                    self._modificationAmount = None
                    self._originalReference = None
                    self._reference = None
                    self._shopperEmail = None
                    self._shopperStatement = None
                    return
            Holder.__name__ = "FundTransferRequest_Holder"
            self.pyclass = Holder

    class FundTransferResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "FundTransferResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FundTransferResult_Def.schema
            TClist = [GTD("http://payment.services.adyen.com","anyType2anyTypeMap",lazy=False)(pname=(ns,"additionalData"), aname="_additionalData", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pspReference"), aname="_pspReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"response"), aname="_response", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._additionalData = None
                    self._pspReference = None
                    self._response = None
                    return
            Holder.__name__ = "FundTransferResult_Holder"
            self.pyclass = Holder

    class ModificationRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "ModificationRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ModificationRequest_Def.schema
            TClist = [GTD("http://payment.services.adyen.com","anyType2anyTypeMap",lazy=False)(pname=(ns,"additionalData"), aname="_additionalData", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authorisationCode"), aname="_authorisationCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"merchantAccount"), aname="_merchantAccount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","Amount",lazy=False)(pname=(ns,"modificationAmount"), aname="_modificationAmount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"originalReference"), aname="_originalReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._additionalData = None
                    self._authorisationCode = None
                    self._merchantAccount = None
                    self._modificationAmount = None
                    self._originalReference = None
                    return
            Holder.__name__ = "ModificationRequest_Holder"
            self.pyclass = Holder

    class ModificationResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "ModificationResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ModificationResult_Def.schema
            TClist = [GTD("http://payment.services.adyen.com","anyType2anyTypeMap",lazy=False)(pname=(ns,"additionalData"), aname="_additionalData", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pspReference"), aname="_pspReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"response"), aname="_response", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._additionalData = None
                    self._pspReference = None
                    self._response = None
                    return
            Holder.__name__ = "ModificationResult_Holder"
            self.pyclass = Holder

    class PaymentRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "PaymentRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PaymentRequest_Def.schema
            TClist = [GTD("http://common.services.adyen.com","Amount",lazy=False)(pname=(ns,"additionalAmount"), aname="_additionalAmount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","anyType2anyTypeMap",lazy=False)(pname=(ns,"additionalData"), aname="_additionalData", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","Amount",lazy=False)(pname=(ns,"amount"), aname="_amount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","BankAccount",lazy=False)(pname=(ns,"bankAccount"), aname="_bankAccount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","BrowserInfo",lazy=False)(pname=(ns,"browserInfo"), aname="_browserInfo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","Card",lazy=False)(pname=(ns,"card"), aname="_card", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","ForexQuote",lazy=False)(pname=(ns,"dccQuote"), aname="_dccQuote", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","Address",lazy=False)(pname=(ns,"deliveryAddress"), aname="_deliveryAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","ELV",lazy=False)(pname=(ns,"elv"), aname="_elv", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"fraudOffset"), aname="_fraudOffset", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"merchantAccount"), aname="_merchantAccount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","ThreeDSecureData",lazy=False)(pname=(ns,"mpiData"), aname="_mpiData", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"orderReference"), aname="_orderReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","Recurring",lazy=False)(pname=(ns,"recurring"), aname="_recurring", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"reference"), aname="_reference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"selectedBrand"), aname="_selectedBrand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"selectedRecurringDetailReference"), aname="_selectedRecurringDetailReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sessionId"), aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperEmail"), aname="_shopperEmail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperIP"), aname="_shopperIP", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperInteraction"), aname="_shopperInteraction", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperReference"), aname="_shopperReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperStatement"), aname="_shopperStatement", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._additionalAmount = None
                    self._additionalData = None
                    self._amount = None
                    self._bankAccount = None
                    self._browserInfo = None
                    self._card = None
                    self._dccQuote = None
                    self._deliveryAddress = None
                    self._elv = None
                    self._fraudOffset = None
                    self._merchantAccount = None
                    self._mpiData = None
                    self._orderReference = None
                    self._recurring = None
                    self._reference = None
                    self._selectedBrand = None
                    self._selectedRecurringDetailReference = None
                    self._sessionId = None
                    self._shopperEmail = None
                    self._shopperIP = None
                    self._shopperInteraction = None
                    self._shopperReference = None
                    self._shopperStatement = None
                    return
            Holder.__name__ = "PaymentRequest_Holder"
            self.pyclass = Holder

    class PaymentRequest3d_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "PaymentRequest3d")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PaymentRequest3d_Def.schema
            TClist = [GTD("http://common.services.adyen.com","Amount",lazy=False)(pname=(ns,"additionalAmount"), aname="_additionalAmount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","anyType2anyTypeMap",lazy=False)(pname=(ns,"additionalData"), aname="_additionalData", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","Amount",lazy=False)(pname=(ns,"amount"), aname="_amount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","BrowserInfo",lazy=False)(pname=(ns,"browserInfo"), aname="_browserInfo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","ForexQuote",lazy=False)(pname=(ns,"dccQuote"), aname="_dccQuote", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","Address",lazy=False)(pname=(ns,"deliveryAddress"), aname="_deliveryAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"fraudOffset"), aname="_fraudOffset", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"md"), aname="_md", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"merchantAccount"), aname="_merchantAccount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"orderReference"), aname="_orderReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"paResponse"), aname="_paResponse", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","Recurring",lazy=False)(pname=(ns,"recurring"), aname="_recurring", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"reference"), aname="_reference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"selectedBrand"), aname="_selectedBrand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"selectedRecurringDetailReference"), aname="_selectedRecurringDetailReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sessionId"), aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperEmail"), aname="_shopperEmail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperIP"), aname="_shopperIP", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperInteraction"), aname="_shopperInteraction", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperReference"), aname="_shopperReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperStatement"), aname="_shopperStatement", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._additionalAmount = None
                    self._additionalData = None
                    self._amount = None
                    self._browserInfo = None
                    self._dccQuote = None
                    self._deliveryAddress = None
                    self._fraudOffset = None
                    self._md = None
                    self._merchantAccount = None
                    self._orderReference = None
                    self._paResponse = None
                    self._recurring = None
                    self._reference = None
                    self._selectedBrand = None
                    self._selectedRecurringDetailReference = None
                    self._sessionId = None
                    self._shopperEmail = None
                    self._shopperIP = None
                    self._shopperInteraction = None
                    self._shopperReference = None
                    self._shopperStatement = None
                    return
            Holder.__name__ = "PaymentRequest3d_Holder"
            self.pyclass = Holder

    class PaymentResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "PaymentResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PaymentResult_Def.schema
            TClist = [GTD("http://payment.services.adyen.com","anyType2anyTypeMap",lazy=False)(pname=(ns,"additionalData"), aname="_additionalData", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authCode"), aname="_authCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","Amount",lazy=False)(pname=(ns,"dccAmount"), aname="_dccAmount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dccSignature"), aname="_dccSignature", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","FraudResult",lazy=False)(pname=(ns,"fraudResult"), aname="_fraudResult", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"issuerUrl"), aname="_issuerUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"md"), aname="_md", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"paRequest"), aname="_paRequest", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pspReference"), aname="_pspReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"refusalReason"), aname="_refusalReason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"resultCode"), aname="_resultCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._additionalData = None
                    self._authCode = None
                    self._dccAmount = None
                    self._dccSignature = None
                    self._fraudResult = None
                    self._issuerUrl = None
                    self._md = None
                    self._paRequest = None
                    self._pspReference = None
                    self._refusalReason = None
                    self._resultCode = None
                    return
            Holder.__name__ = "PaymentResult_Holder"
            self.pyclass = Holder

    class Recurring_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "Recurring")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Recurring_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"contract"), aname="_contract", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"recurringDetailName"), aname="_recurringDetailName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contract = None
                    self._recurringDetailName = None
                    return
            Holder.__name__ = "Recurring_Holder"
            self.pyclass = Holder

    class ThreeDSecureData_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "ThreeDSecureData")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ThreeDSecureData_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"authenticationResponse"), aname="_authenticationResponse", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"cavv"), aname="_cavv", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cavvAlgorithm"), aname="_cavvAlgorithm", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"directoryResponse"), aname="_directoryResponse", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"eci"), aname="_eci", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"xid"), aname="_xid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._authenticationResponse = None
                    self._cavv = None
                    self._cavvAlgorithm = None
                    self._directoryResponse = None
                    self._eci = None
                    self._xid = None
                    return
            Holder.__name__ = "ThreeDSecureData_Holder"
            self.pyclass = Holder

    class ArrayOfFraudCheckResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "ArrayOfFraudCheckResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfFraudCheckResult_Def.schema
            TClist = [GTD("http://payment.services.adyen.com","FraudCheckResult",lazy=False)(pname=(ns,"FraudCheckResult"), aname="_FraudCheckResult", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FraudCheckResult = []
                    return
            Holder.__name__ = "ArrayOfFraudCheckResult_Holder"
            self.pyclass = Holder

    class anyType2anyTypeMap_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "anyType2anyTypeMap")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.anyType2anyTypeMap_Def.schema
            TClist = [self.__class__.entry_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._entry = []
                    return
            Holder.__name__ = "anyType2anyTypeMap_Holder"
            self.pyclass = Holder


        class entry_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "entry"
            schema = "http://payment.services.adyen.com"
            def __init__(self, **kw):
                ns = ns0.anyType2anyTypeMap_Def.entry_Dec.schema
                TClist = [ZSI.TC.AnyType(pname=(ns,"key"), aname="_key", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://payment.services.adyen.com","entry")
                kw["aname"] = "_entry"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._key = None
                        self._value = None
                        return
                Holder.__name__ = "entry_Holder"
                self.pyclass = Holder




    class ServiceException_Dec(ElementDeclaration):
        literal = "ServiceException"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            kw["pname"] = ("http://payment.services.adyen.com","ServiceException")
            kw["aname"] = "_ServiceException"
            if ns1.ServiceException_Def not in ns0.ServiceException_Dec.__bases__:
                bases = list(ns0.ServiceException_Dec.__bases__)
                bases.insert(0, ns1.ServiceException_Def)
                ns0.ServiceException_Dec.__bases__ = tuple(bases)

            ns1.ServiceException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ServiceException_Dec_Holder"

    class authorise_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "authorise"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.authorise_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","PaymentRequest",lazy=False)(pname=(ns,"paymentRequest"), aname="_paymentRequest", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","authorise")
            kw["aname"] = "_authorise"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._paymentRequest = None
                    return
            Holder.__name__ = "authorise_Holder"
            self.pyclass = Holder

    class authorise3d_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "authorise3d"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.authorise3d_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","PaymentRequest3d",lazy=False)(pname=(ns,"paymentRequest3d"), aname="_paymentRequest3d", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","authorise3d")
            kw["aname"] = "_authorise3d"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._paymentRequest3d = None
                    return
            Holder.__name__ = "authorise3d_Holder"
            self.pyclass = Holder

    class authorise3dResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "authorise3dResponse"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.authorise3dResponse_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","PaymentResult",lazy=False)(pname=(ns,"paymentResult"), aname="_paymentResult", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","authorise3dResponse")
            kw["aname"] = "_authorise3dResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._paymentResult = None
                    return
            Holder.__name__ = "authorise3dResponse_Holder"
            self.pyclass = Holder

    class authoriseReferral_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "authoriseReferral"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.authoriseReferral_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","ModificationRequest",lazy=False)(pname=(ns,"modificationRequest"), aname="_modificationRequest", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","authoriseReferral")
            kw["aname"] = "_authoriseReferral"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modificationRequest = None
                    return
            Holder.__name__ = "authoriseReferral_Holder"
            self.pyclass = Holder

    class authoriseReferralResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "authoriseReferralResponse"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.authoriseReferralResponse_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","ModificationResult",lazy=False)(pname=(ns,"authoriseReferralResult"), aname="_authoriseReferralResult", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","authoriseReferralResponse")
            kw["aname"] = "_authoriseReferralResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._authoriseReferralResult = None
                    return
            Holder.__name__ = "authoriseReferralResponse_Holder"
            self.pyclass = Holder

    class authoriseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "authoriseResponse"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.authoriseResponse_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","PaymentResult",lazy=False)(pname=(ns,"paymentResult"), aname="_paymentResult", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","authoriseResponse")
            kw["aname"] = "_authoriseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._paymentResult = None
                    return
            Holder.__name__ = "authoriseResponse_Holder"
            self.pyclass = Holder

    class balanceCheck_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "balanceCheck"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.balanceCheck_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","BalanceCheckRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","balanceCheck")
            kw["aname"] = "_balanceCheck"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "balanceCheck_Holder"
            self.pyclass = Holder

    class balanceCheckResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "balanceCheckResponse"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.balanceCheckResponse_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","BalanceCheckResult",lazy=False)(pname=(ns,"response"), aname="_response", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","balanceCheckResponse")
            kw["aname"] = "_balanceCheckResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._response = None
                    return
            Holder.__name__ = "balanceCheckResponse_Holder"
            self.pyclass = Holder

    class cancel_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "cancel"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.cancel_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","ModificationRequest",lazy=False)(pname=(ns,"modificationRequest"), aname="_modificationRequest", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","cancel")
            kw["aname"] = "_cancel"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modificationRequest = None
                    return
            Holder.__name__ = "cancel_Holder"
            self.pyclass = Holder

    class cancelOrRefund_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "cancelOrRefund"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.cancelOrRefund_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","ModificationRequest",lazy=False)(pname=(ns,"modificationRequest"), aname="_modificationRequest", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","cancelOrRefund")
            kw["aname"] = "_cancelOrRefund"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modificationRequest = None
                    return
            Holder.__name__ = "cancelOrRefund_Holder"
            self.pyclass = Holder

    class cancelOrRefundResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "cancelOrRefundResponse"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.cancelOrRefundResponse_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","ModificationResult",lazy=False)(pname=(ns,"cancelOrRefundResult"), aname="_cancelOrRefundResult", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","cancelOrRefundResponse")
            kw["aname"] = "_cancelOrRefundResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cancelOrRefundResult = None
                    return
            Holder.__name__ = "cancelOrRefundResponse_Holder"
            self.pyclass = Holder

    class cancelResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "cancelResponse"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.cancelResponse_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","ModificationResult",lazy=False)(pname=(ns,"cancelResult"), aname="_cancelResult", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","cancelResponse")
            kw["aname"] = "_cancelResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cancelResult = None
                    return
            Holder.__name__ = "cancelResponse_Holder"
            self.pyclass = Holder

    class capture_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "capture"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.capture_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","ModificationRequest",lazy=False)(pname=(ns,"modificationRequest"), aname="_modificationRequest", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","capture")
            kw["aname"] = "_capture"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modificationRequest = None
                    return
            Holder.__name__ = "capture_Holder"
            self.pyclass = Holder

    class captureResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "captureResponse"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.captureResponse_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","ModificationResult",lazy=False)(pname=(ns,"captureResult"), aname="_captureResult", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","captureResponse")
            kw["aname"] = "_captureResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._captureResult = None
                    return
            Holder.__name__ = "captureResponse_Holder"
            self.pyclass = Holder

    class checkFraud_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkFraud"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.checkFraud_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","PaymentRequest",lazy=False)(pname=(ns,"paymentRequest"), aname="_paymentRequest", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","checkFraud")
            kw["aname"] = "_checkFraud"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._paymentRequest = None
                    return
            Holder.__name__ = "checkFraud_Holder"
            self.pyclass = Holder

    class checkFraudResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkFraudResponse"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.checkFraudResponse_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","PaymentResult",lazy=False)(pname=(ns,"paymentResult"), aname="_paymentResult", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","checkFraudResponse")
            kw["aname"] = "_checkFraudResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._paymentResult = None
                    return
            Holder.__name__ = "checkFraudResponse_Holder"
            self.pyclass = Holder

    class directdebit_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "directdebit"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.directdebit_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","DirectDebitRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","directdebit")
            kw["aname"] = "_directdebit"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "directdebit_Holder"
            self.pyclass = Holder

    class directdebitResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "directdebitResponse"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.directdebitResponse_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","DirectDebitResponse",lazy=False)(pname=(ns,"response"), aname="_response", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","directdebitResponse")
            kw["aname"] = "_directdebitResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._response = None
                    return
            Holder.__name__ = "directdebitResponse_Holder"
            self.pyclass = Holder

    class fundTransfer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "fundTransfer"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.fundTransfer_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","FundTransferRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","fundTransfer")
            kw["aname"] = "_fundTransfer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "fundTransfer_Holder"
            self.pyclass = Holder

    class fundTransferResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "fundTransferResponse"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.fundTransferResponse_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","FundTransferResult",lazy=False)(pname=(ns,"result"), aname="_result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","fundTransferResponse")
            kw["aname"] = "_fundTransferResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = None
                    return
            Holder.__name__ = "fundTransferResponse_Holder"
            self.pyclass = Holder

    class refund_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "refund"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.refund_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","ModificationRequest",lazy=False)(pname=(ns,"modificationRequest"), aname="_modificationRequest", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","refund")
            kw["aname"] = "_refund"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modificationRequest = None
                    return
            Holder.__name__ = "refund_Holder"
            self.pyclass = Holder

    class refundResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "refundResponse"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.refundResponse_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","ModificationResult",lazy=False)(pname=(ns,"refundResult"), aname="_refundResult", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","refundResponse")
            kw["aname"] = "_refundResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._refundResult = None
                    return
            Holder.__name__ = "refundResponse_Holder"
            self.pyclass = Holder

    class refundWithData_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "refundWithData"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.refundWithData_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","PaymentRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","refundWithData")
            kw["aname"] = "_refundWithData"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "refundWithData_Holder"
            self.pyclass = Holder

    class refundWithDataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "refundWithDataResponse"
        schema = "http://payment.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.refundWithDataResponse_Dec.schema
            TClist = [GTD("http://payment.services.adyen.com","PaymentResult",lazy=False)(pname=(ns,"result"), aname="_result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://payment.services.adyen.com","refundWithDataResponse")
            kw["aname"] = "_refundWithDataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = None
                    return
            Holder.__name__ = "refundWithDataResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://payment.services.adyen.com)
