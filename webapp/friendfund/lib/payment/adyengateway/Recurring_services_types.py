################################################## 
# Recurring_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://recurring.services.adyen.com
##############################

class ns0:
    targetNamespace = "http://recurring.services.adyen.com"

    class DisableRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://recurring.services.adyen.com"
        type = (schema, "DisableRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DisableRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"merchantAccount"), aname="_merchantAccount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"recurringDetailReference"), aname="_recurringDetailReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperReference"), aname="_shopperReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._merchantAccount = None
                    self._recurringDetailReference = None
                    self._shopperReference = None
                    return
            Holder.__name__ = "DisableRequest_Holder"
            self.pyclass = Holder

    class DisableResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://recurring.services.adyen.com"
        type = (schema, "DisableResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DisableResult_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"response"), aname="_response", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._response = None
                    return
            Holder.__name__ = "DisableResult_Holder"
            self.pyclass = Holder

    class RecurringDetail_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://recurring.services.adyen.com"
        type = (schema, "RecurringDetail")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RecurringDetail_Def.schema
            TClist = [GTD("http://payment.services.adyen.com","BankAccount",lazy=False)(pname=(ns,"bank"), aname="_bank", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","Card",lazy=False)(pname=(ns,"card"), aname="_card", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"creationDate"), aname="_creationDate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","ELV",lazy=False)(pname=(ns,"elv"), aname="_elv", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"recurringDetailReference"), aname="_recurringDetailReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"variant"), aname="_variant", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bank = None
                    self._card = None
                    self._creationDate = None
                    self._elv = None
                    self._name = None
                    self._recurringDetailReference = None
                    self._variant = None
                    return
            Holder.__name__ = "RecurringDetail_Holder"
            self.pyclass = Holder

    class RecurringDetailsRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://recurring.services.adyen.com"
        type = (schema, "RecurringDetailsRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RecurringDetailsRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"customReference"), aname="_customReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"merchantAccount"), aname="_merchantAccount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","Recurring",lazy=False)(pname=(ns,"recurring"), aname="_recurring", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperReference"), aname="_shopperReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._customReference = None
                    self._merchantAccount = None
                    self._recurring = None
                    self._shopperReference = None
                    return
            Holder.__name__ = "RecurringDetailsRequest_Holder"
            self.pyclass = Holder

    class RecurringDetailsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://recurring.services.adyen.com"
        type = (schema, "RecurringDetailsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RecurringDetailsResult_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"creationDate"), aname="_creationDate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://recurring.services.adyen.com","ArrayOfRecurringDetail",lazy=False)(pname=(ns,"details"), aname="_details", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lastKnownShopperEmail"), aname="_lastKnownShopperEmail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperReference"), aname="_shopperReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._creationDate = None
                    self._details = None
                    self._lastKnownShopperEmail = None
                    self._shopperReference = None
                    return
            Holder.__name__ = "RecurringDetailsResult_Holder"
            self.pyclass = Holder

    class RecurringRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://recurring.services.adyen.com"
        type = (schema, "RecurringRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RecurringRequest_Def.schema
            TClist = [GTD("http://common.services.adyen.com","Amount",lazy=False)(pname=(ns,"amount"), aname="_amount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"merchantAccount"), aname="_merchantAccount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"originalReference"), aname="_originalReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"recurringReference"), aname="_recurringReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"reference"), aname="_reference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperEmail"), aname="_shopperEmail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperReference"), aname="_shopperReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._amount = None
                    self._merchantAccount = None
                    self._originalReference = None
                    self._recurringReference = None
                    self._reference = None
                    self._shopperEmail = None
                    self._shopperReference = None
                    return
            Holder.__name__ = "RecurringRequest_Holder"
            self.pyclass = Holder

    class RecurringResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://recurring.services.adyen.com"
        type = (schema, "RecurringResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RecurringResult_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"pspReference"), aname="_pspReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"response"), aname="_response", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pspReference = None
                    self._response = None
                    return
            Holder.__name__ = "RecurringResult_Holder"
            self.pyclass = Holder

    class StoreTokenRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://recurring.services.adyen.com"
        type = (schema, "StoreTokenRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.StoreTokenRequest_Def.schema
            TClist = [GTD("http://payment.services.adyen.com","BankAccount",lazy=False)(pname=(ns,"bank"), aname="_bank", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","Card",lazy=False)(pname=(ns,"card"), aname="_card", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","ELV",lazy=False)(pname=(ns,"elv"), aname="_elv", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"merchantAccount"), aname="_merchantAccount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://payment.services.adyen.com","Recurring",lazy=False)(pname=(ns,"recurring"), aname="_recurring", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperEmail"), aname="_shopperEmail", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shopperReference"), aname="_shopperReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bank = None
                    self._card = None
                    self._elv = None
                    self._merchantAccount = None
                    self._name = None
                    self._recurring = None
                    self._shopperEmail = None
                    self._shopperReference = None
                    return
            Holder.__name__ = "StoreTokenRequest_Holder"
            self.pyclass = Holder

    class StoreTokenResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://recurring.services.adyen.com"
        type = (schema, "StoreTokenResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.StoreTokenResult_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"rechargeReference"), aname="_rechargeReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"recurringDetailReference"), aname="_recurringDetailReference", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"result"), aname="_result", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rechargeReference = None
                    self._recurringDetailReference = None
                    self._result = None
                    return
            Holder.__name__ = "StoreTokenResult_Holder"
            self.pyclass = Holder

    class ArrayOfRecurringDetail_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://recurring.services.adyen.com"
        type = (schema, "ArrayOfRecurringDetail")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfRecurringDetail_Def.schema
            TClist = [GTD("http://recurring.services.adyen.com","RecurringDetail",lazy=False)(pname=(ns,"RecurringDetail"), aname="_RecurringDetail", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RecurringDetail = []
                    return
            Holder.__name__ = "ArrayOfRecurringDetail_Holder"
            self.pyclass = Holder

    class ServiceException_Dec(ElementDeclaration):
        literal = "ServiceException"
        schema = "http://recurring.services.adyen.com"
        def __init__(self, **kw):
            kw["pname"] = ("http://recurring.services.adyen.com","ServiceException")
            kw["aname"] = "_ServiceException"
            if ns1.ServiceException_Def not in ns0.ServiceException_Dec.__bases__:
                bases = list(ns0.ServiceException_Dec.__bases__)
                bases.insert(0, ns1.ServiceException_Def)
                ns0.ServiceException_Dec.__bases__ = tuple(bases)

            ns1.ServiceException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ServiceException_Dec_Holder"

    class deactivateRecurring_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deactivateRecurring"
        schema = "http://recurring.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.deactivateRecurring_Dec.schema
            TClist = [GTD("http://recurring.services.adyen.com","RecurringRequest",lazy=False)(pname=(ns,"recurringRequest"), aname="_recurringRequest", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://recurring.services.adyen.com","deactivateRecurring")
            kw["aname"] = "_deactivateRecurring"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._recurringRequest = None
                    return
            Holder.__name__ = "deactivateRecurring_Holder"
            self.pyclass = Holder

    class deactivateRecurringResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deactivateRecurringResponse"
        schema = "http://recurring.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.deactivateRecurringResponse_Dec.schema
            TClist = [GTD("http://recurring.services.adyen.com","RecurringResult",lazy=False)(pname=(ns,"recurringResult"), aname="_recurringResult", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://recurring.services.adyen.com","deactivateRecurringResponse")
            kw["aname"] = "_deactivateRecurringResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._recurringResult = None
                    return
            Holder.__name__ = "deactivateRecurringResponse_Holder"
            self.pyclass = Holder

    class disable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "disable"
        schema = "http://recurring.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.disable_Dec.schema
            TClist = [GTD("http://recurring.services.adyen.com","DisableRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://recurring.services.adyen.com","disable")
            kw["aname"] = "_disable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "disable_Holder"
            self.pyclass = Holder

    class disableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "disableResponse"
        schema = "http://recurring.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.disableResponse_Dec.schema
            TClist = [GTD("http://recurring.services.adyen.com","DisableResult",lazy=False)(pname=(ns,"result"), aname="_result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://recurring.services.adyen.com","disableResponse")
            kw["aname"] = "_disableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = None
                    return
            Holder.__name__ = "disableResponse_Holder"
            self.pyclass = Holder

    class initialiseRecurring_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "initialiseRecurring"
        schema = "http://recurring.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.initialiseRecurring_Dec.schema
            TClist = [GTD("http://recurring.services.adyen.com","RecurringRequest",lazy=False)(pname=(ns,"recurringRequest"), aname="_recurringRequest", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://recurring.services.adyen.com","initialiseRecurring")
            kw["aname"] = "_initialiseRecurring"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._recurringRequest = None
                    return
            Holder.__name__ = "initialiseRecurring_Holder"
            self.pyclass = Holder

    class initialiseRecurringResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "initialiseRecurringResponse"
        schema = "http://recurring.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.initialiseRecurringResponse_Dec.schema
            TClist = [GTD("http://recurring.services.adyen.com","RecurringResult",lazy=False)(pname=(ns,"recurringResult"), aname="_recurringResult", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://recurring.services.adyen.com","initialiseRecurringResponse")
            kw["aname"] = "_initialiseRecurringResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._recurringResult = None
                    return
            Holder.__name__ = "initialiseRecurringResponse_Holder"
            self.pyclass = Holder

    class listRecurringDetails_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "listRecurringDetails"
        schema = "http://recurring.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.listRecurringDetails_Dec.schema
            TClist = [GTD("http://recurring.services.adyen.com","RecurringDetailsRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://recurring.services.adyen.com","listRecurringDetails")
            kw["aname"] = "_listRecurringDetails"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "listRecurringDetails_Holder"
            self.pyclass = Holder

    class listRecurringDetailsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "listRecurringDetailsResponse"
        schema = "http://recurring.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.listRecurringDetailsResponse_Dec.schema
            TClist = [GTD("http://recurring.services.adyen.com","RecurringDetailsResult",lazy=False)(pname=(ns,"result"), aname="_result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://recurring.services.adyen.com","listRecurringDetailsResponse")
            kw["aname"] = "_listRecurringDetailsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = None
                    return
            Holder.__name__ = "listRecurringDetailsResponse_Holder"
            self.pyclass = Holder

    class storeToken_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "storeToken"
        schema = "http://recurring.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.storeToken_Dec.schema
            TClist = [GTD("http://recurring.services.adyen.com","StoreTokenRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://recurring.services.adyen.com","storeToken")
            kw["aname"] = "_storeToken"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "storeToken_Holder"
            self.pyclass = Holder

    class storeTokenResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "storeTokenResponse"
        schema = "http://recurring.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.storeTokenResponse_Dec.schema
            TClist = [GTD("http://recurring.services.adyen.com","StoreTokenResult",lazy=False)(pname=(ns,"result"), aname="_result", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://recurring.services.adyen.com","storeTokenResponse")
            kw["aname"] = "_storeTokenResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = None
                    return
            Holder.__name__ = "storeTokenResponse_Holder"
            self.pyclass = Holder

    class submitRecurring_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "submitRecurring"
        schema = "http://recurring.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.submitRecurring_Dec.schema
            TClist = [GTD("http://recurring.services.adyen.com","RecurringRequest",lazy=False)(pname=(ns,"recurringRequest"), aname="_recurringRequest", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://recurring.services.adyen.com","submitRecurring")
            kw["aname"] = "_submitRecurring"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._recurringRequest = None
                    return
            Holder.__name__ = "submitRecurring_Holder"
            self.pyclass = Holder

    class submitRecurringResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "submitRecurringResponse"
        schema = "http://recurring.services.adyen.com"
        def __init__(self, **kw):
            ns = ns0.submitRecurringResponse_Dec.schema
            TClist = [GTD("http://recurring.services.adyen.com","RecurringResult",lazy=False)(pname=(ns,"recurringResult"), aname="_recurringResult", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://recurring.services.adyen.com","submitRecurringResponse")
            kw["aname"] = "_submitRecurringResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._recurringResult = None
                    return
            Holder.__name__ = "submitRecurringResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://recurring.services.adyen.com)

##############################
# targetNamespace
# http://common.services.adyen.com
##############################

class ns1:
    targetNamespace = "http://common.services.adyen.com"

    class Address_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://common.services.adyen.com"
        type = (schema, "Address")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Address_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"city"), aname="_city", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"country"), aname="_country", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"houseNumberOrName"), aname="_houseNumberOrName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"postalCode"), aname="_postalCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"stateOrProvince"), aname="_stateOrProvince", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"street"), aname="_street", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._city = None
                    self._country = None
                    self._houseNumberOrName = None
                    self._postalCode = None
                    self._stateOrProvince = None
                    self._street = None
                    return
            Holder.__name__ = "Address_Holder"
            self.pyclass = Holder

    class Amount_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://common.services.adyen.com"
        type = (schema, "Amount")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Amount_Def.schema
            TClist = [self.__class__.currency_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._currency = None
                    self._value = None
                    return
            Holder.__name__ = "Amount_Holder"
            self.pyclass = Holder


        class currency_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "currency"
            schema = "http://common.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://common.services.adyen.com","currency")
                kw["aname"] = "_currency"
                ZSI.TC.String.__init__(self, **kw)




    class ServiceException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://common.services.adyen.com"
        type = (schema, "ServiceException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ServiceException_Def.schema
            TClist = [GTD("http://common.services.adyen.com","Error",lazy=False)(pname=(ns,"error"), aname="_error", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://common.services.adyen.com","Type",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._error = None
                    self._type = None
                    return
            Holder.__name__ = "ServiceException_Holder"
            self.pyclass = Holder

    class Error_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://common.services.adyen.com"
        type = (schema, "Error")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Type_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://common.services.adyen.com"
        type = (schema, "Type")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

# end class ns1 (tns: http://common.services.adyen.com)

##############################
# targetNamespace
# http://payment.services.adyen.com
##############################

class ns2:
    targetNamespace = "http://payment.services.adyen.com"

    class BankAccount_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "BankAccount")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.BankAccount_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"bankAccountNumber"), aname="_bankAccountNumber", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bankLocationId"), aname="_bankLocationId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bankName"), aname="_bankName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bic"), aname="_bic", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"iban"), aname="_iban", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ownerName"), aname="_ownerName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bankAccountNumber = None
                    self._bankLocationId = None
                    self._bankName = None
                    self._bic = None
                    self._countryCode = None
                    self._iban = None
                    self._ownerName = None
                    return
            Holder.__name__ = "BankAccount_Holder"
            self.pyclass = Holder

    class Card_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "Card")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Card_Def.schema
            TClist = [GTD("http://common.services.adyen.com","Address",lazy=False)(pname=(ns,"billingAddress"), aname="_billingAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"brand"), aname="_brand", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), self.__class__.cvc_Dec(minOccurs=0, maxOccurs=1, nillable=True, encoded=kw.get("encoded")), self.__class__.expiryMonth_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.expiryYear_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.holderName_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.issueNumber_Dec(minOccurs=0, maxOccurs=1, nillable=True, encoded=kw.get("encoded")), self.__class__.number_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.startMonth_Dec(minOccurs=0, maxOccurs=1, nillable=True, encoded=kw.get("encoded")), self.__class__.startYear_Dec(minOccurs=0, maxOccurs=1, nillable=True, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._billingAddress = None
                    self._brand = None
                    self._cvc = None
                    self._expiryMonth = None
                    self._expiryYear = None
                    self._holderName = None
                    self._issueNumber = None
                    self._number = None
                    self._startMonth = None
                    self._startYear = None
                    return
            Holder.__name__ = "Card_Holder"
            self.pyclass = Holder


        class cvc_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "cvc"
            schema = "http://payment.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://payment.services.adyen.com","cvc")
                kw["aname"] = "_cvc"
                ZSI.TC.String.__init__(self, **kw)





        class expiryMonth_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "expiryMonth"
            schema = "http://payment.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://payment.services.adyen.com","expiryMonth")
                kw["aname"] = "_expiryMonth"
                ZSI.TC.String.__init__(self, **kw)





        class expiryYear_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "expiryYear"
            schema = "http://payment.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://payment.services.adyen.com","expiryYear")
                kw["aname"] = "_expiryYear"
                ZSI.TC.String.__init__(self, **kw)





        class holderName_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "holderName"
            schema = "http://payment.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://payment.services.adyen.com","holderName")
                kw["aname"] = "_holderName"
                ZSI.TC.String.__init__(self, **kw)





        class issueNumber_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "issueNumber"
            schema = "http://payment.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://payment.services.adyen.com","issueNumber")
                kw["aname"] = "_issueNumber"
                ZSI.TC.String.__init__(self, **kw)





        class number_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "number"
            schema = "http://payment.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://payment.services.adyen.com","number")
                kw["aname"] = "_number"
                ZSI.TC.String.__init__(self, **kw)





        class startMonth_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "startMonth"
            schema = "http://payment.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://payment.services.adyen.com","startMonth")
                kw["aname"] = "_startMonth"
                ZSI.TC.String.__init__(self, **kw)





        class startYear_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "startYear"
            schema = "http://payment.services.adyen.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://payment.services.adyen.com","startYear")
                kw["aname"] = "_startYear"
                ZSI.TC.String.__init__(self, **kw)




    class ELV_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "ELV")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ELV_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"accountHolderName"), aname="_accountHolderName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bankAccountNumber"), aname="_bankAccountNumber", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bankLocation"), aname="_bankLocation", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bankLocationId"), aname="_bankLocationId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bankName"), aname="_bankName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accountHolderName = None
                    self._bankAccountNumber = None
                    self._bankLocation = None
                    self._bankLocationId = None
                    self._bankName = None
                    return
            Holder.__name__ = "ELV_Holder"
            self.pyclass = Holder

    class Recurring_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://payment.services.adyen.com"
        type = (schema, "Recurring")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Recurring_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"contract"), aname="_contract", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"recurringDetailName"), aname="_recurringDetailName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contract = None
                    self._recurringDetailName = None
                    return
            Holder.__name__ = "Recurring_Holder"
            self.pyclass = Holder

# end class ns2 (tns: http://payment.services.adyen.com)
